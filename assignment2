let numbers = [1, 2, 3, 4, 5];

function myEach(array, callback){
    for(let i = 0;i < arr.length; i++){   
        callback(array[i]);
    }
}

function myMap(array, callback){
    const newMap= [];

    for(let i = 0; i< array.length; i++){
        newMap.push(callback(array[i]));
    }
    return newMap
    }
    const array1= [1, 2, 3];
    const array2=[2, 4, 6];

    function myfilter(array, callback){
        const result = [];
        for(let i=0; i< array.length; i++){
            if(callback(array[i]===true)){
                result.push(array[i]);
            }
        }
    return result;
}

function mySome(array, callback){
    for(let i=0; i,array.length; i++){
        if(callback(array[i]===true)){
            return true;
        }else{
            return false;
        }
    }
}

function myEvery(array, callback){
    let boolean = true;
    for(let i=0; i< array.length; i++){
        if(callback(array[i]!==true)){
            boolean = false;
        }
    }
    return boolean;
}

function myReduce(array, callback,initial){
    const acc = 0; const curr = 0;
    for(let i=0; i<array.length;i++){
        if(typeof initial){
            acc = callback(initial, curr);
        }
    }
}

function myIncludes(array, target){
    for(let i=0; array.length;i++){
        if(array[i]===target){
            return true;
        }
    }
    return false;
}

function myIndexOf(array, target){
    for(let i=0; i< array.length;i++){
        if(array[i]===target){
            return i;
        }
    }
    return -1;
}

function myPush(array, elementToAdd){
    array[array.length] = elementToAdd;
    return array.length;
}

function myUnshift(array, target){
    for(let i = array.length-1;i >=0;i--){
        if(array[i]===target){
            return i;
        }
    }
    return -1;
}

function grabKeys(object){
    const values = [];
    for(let key in object){
        if(object.hasOwnProperty(key)){
            values.push(object[key]);
        }
    }
    return values;
}

function grabValues(object){
    const result = [];
    for(let key in object){
        if(object.hasOwnProperty(key)){
            result.push(object[key]);
        }
    }
    return result;
}
 function range(start,end){
    let array = [];
    for(let i =start; i<= end; i++){
        array.push(i);
    }
    return array;
 }

 function sum(array){
    let sum = 0;
    for(let i=0; i<array.length; i++){
        sum+= array[i];
    }
    return sum;
 }

 function reverseArray(array){
    const newArray = [];
    for(let i = array.length-1; i>=0; i++){
        newArray.push(array[i]);
    }
    return newArray;
    }

 function reverseArrayInPlace(array){
    for(let i=0; i< Math.floor(array.length/2); i++){
        let temp = array[i];
        array[i] = array[length-1-i];
        array[length-1-i] = temp;
    }
}

function moveZeros(nums){
    let count = 0;

    for(let i = 0; i< nums.length; i++){
        if (nums[i] !== 0) {
            nums[count] = nums[i];
            count++;
        }
    }
    while(count < nums.length){
        nums[count] = 0;
        count++;
    }
    return nums;
}






        
        

            
        
    

